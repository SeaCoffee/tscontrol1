{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\IdeaProjects\\\\tscontrol\\\\src\\\\components\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext({\n  theme: 'light',\n  toggleTheme: () => {}\n});\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(ThemeProvider, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","ThemeContext","theme","toggleTheme","ThemeProvider","children","_s","setTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["C:/Users/Dell/IdeaProjects/tscontrol/src/components/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\r\n\r\n\r\n\r\ntype ThemeContextType = {\r\n    theme: 'light' | 'dark';\r\n    toggleTheme: () => void;\r\n};\r\n\r\nexport const ThemeContext = createContext<ThemeContextType>({\r\n    theme: 'light',\r\n    toggleTheme: () => {},\r\n});\r\n\r\ninterface ThemeProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n\r\n    const [theme, setTheme] = useState<'light' | 'dark'>('light');\r\n\r\n    const toggleTheme = () => {\r\n        setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};\r\nexport const useTheme = () => useContext(ThemeContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9E,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAmB;EACxDM,KAAK,EAAE,OAAO;EACdC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACxB,CAAC,CAAC;AAMF,OAAO,MAAMC,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAEzE,MAAM,CAACJ,KAAK,EAAEK,QAAQ,CAAC,GAAGV,QAAQ,CAAmB,OAAO,CAAC;EAE7D,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACtBI,QAAQ,CAAEC,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACvE,CAAC;EAED,oBACIR,OAAA,CAACC,YAAY,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAER,KAAK;MAAEC;IAAY,CAAE;IAAAE,QAAA,EAChDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC,CAAC;AAACR,EAAA,CAbWF,aAA2C;AAAAW,EAAA,GAA3CX,aAA2C;AAcxD,OAAO,MAAMY,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnB,UAAU,CAACG,YAAY,CAAC;AAAA;AAACgB,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}