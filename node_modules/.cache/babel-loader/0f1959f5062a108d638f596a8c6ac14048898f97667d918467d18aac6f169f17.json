{"ast":null,"code":"import axios from 'axios';\nconst apiService = axios.create({\n  baseURL: 'https://api.themoviedb.org'\n});\nconst userApiService = axios.create({\n  baseURL: 'https://api.themoviedb.org'\n});\nconst token = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjOGI1MGU4NDEwNDBkNDRmNTM4M2FhYmQ1NjM3NWFlMyIsInN1YiI6IjY1ZGIwYjQ3NGMxZDlhMDE0OTZlZTRhMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Ilvqz3h97l6BS5an2BS-sxDk7VDTu13Qcv1fFHAWHfA';\napiService.interceptors.request.use(request => {\n  if (token) {\n    request.headers.Authorization = `Bearer ${token}`;\n  }\n  return request;\n});\nuserApiService.interceptors.request.use(request => {\n  request.headers.Authorization = `Bearer ${token}`;\n  return request;\n});\nexport const moviesService = {\n  getAll: (page = 1) => apiService.get(`/3/movie/popular?page=${page}`).then(response => response).catch(error => {\n    console.error(error);\n    throw error;\n  }),\n  byId: movie_id => apiService.get(`/3/movie/${movie_id}`).then(response => response).catch(error => {\n    console.error(error);\n    throw error;\n  })\n};\nexport const genresService = {\n  getAll: () => apiService.get('/3/genre/movie/list').then(response => response).catch(error => {\n    console.error(error);\n    throw error;\n  }),\n  getMoviesByGenre: (genreId, page = 1) => apiService.get(`/3/discover/movie?with_genres=${genreId}&page=${page}`).then(response => response).catch(error => {\n    console.error(error);\n    throw error;\n  })\n};\nexport const searchService = {\n  getAll: (query, page = 1) => apiService.get(`/3/search/movie?query=${encodeURIComponent(query)}&page=${page}`).then(response => response).catch(error => {\n    console.error(error);\n    throw error;\n  })\n};\nexport const userService = {\n  getUserInfo: () => userApiService.get('/3/account').then(response => response).catch(error => {\n    console.error(error);\n    throw error;\n  })\n};\nexport default apiService;","map":{"version":3,"names":["axios","apiService","create","baseURL","userApiService","token","interceptors","request","use","headers","Authorization","moviesService","getAll","page","get","then","response","catch","error","console","byId","movie_id","genresService","getMoviesByGenre","genreId","searchService","query","encodeURIComponent","userService","getUserInfo"],"sources":["C:/Users/Dell/IdeaProjects/tscontrol/src/services/axiosService.tsx"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\n\r\n\r\n\r\n\r\nexport interface MovieApiResponse {\r\n    page: number;\r\n    results: Movie[];\r\n    total_results: number;\r\n    total_pages: number;\r\n}\r\n\r\nexport interface GenreApiResponse {\r\n    genres: Genre[];\r\n}\r\n\r\nexport interface Genre {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface Movie {\r\n    id: number;\r\n    title: string;\r\n    poster_path: string;\r\n    vote_average: number;\r\n    genre_ids: number[];\r\n    overview: string;\r\n    release_date: string;\r\n    runtime?: number;\r\n    budget?: number;\r\n    revenue?: number;\r\n}\r\n\r\nexport interface UserApiResponse {\r\n    id: number;\r\n    name: string;\r\n    username: string;\r\n}\r\n\r\n\r\n\r\nconst apiService = axios.create({\r\n    baseURL: 'https://api.themoviedb.org'\r\n});\r\n\r\nconst userApiService = axios.create({\r\n    baseURL: 'https://api.themoviedb.org'\r\n});\r\n\r\nconst token = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjOGI1MGU4NDEwNDBkNDRmNTM4M2FhYmQ1NjM3NWFlMyIsInN1YiI6IjY1ZGIwYjQ3NGMxZDlhMDE0OTZlZTRhMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Ilvqz3h97l6BS5an2BS-sxDk7VDTu13Qcv1fFHAWHfA';\r\n\r\napiService.interceptors.request.use(request => {\r\n    if (token) {\r\n        request.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return request;\r\n});\r\n\r\nuserApiService.interceptors.request.use(request => {\r\n    request.headers.Authorization = `Bearer ${token}`;\r\n    return request;\r\n});\r\n\r\nexport const moviesService = {\r\n    getAll: (page = 1): Promise<AxiosResponse<MovieApiResponse>> =>\r\n        apiService.get(`/3/movie/popular?page=${page}`)\r\n            .then(response => response)\r\n            .catch(error => { console.error(error); throw error; }),\r\n\r\n    byId: (movie_id: number): Promise<AxiosResponse<Movie>> =>\r\n        apiService.get(`/3/movie/${movie_id}`)\r\n            .then(response => response)\r\n            .catch(error => { console.error(error); throw error; }),\r\n};\r\n\r\n\r\nexport const genresService = {\r\n    getAll: (): Promise<AxiosResponse<GenreApiResponse>> =>\r\n        apiService.get('/3/genre/movie/list')\r\n            .then(response => response)\r\n            .catch(error => { console.error(error); throw error; }),\r\n\r\n    getMoviesByGenre: (genreId: number, page = 1): Promise<AxiosResponse<MovieApiResponse>> =>\r\n        apiService.get(`/3/discover/movie?with_genres=${genreId}&page=${page}`)\r\n            .then(response => response)\r\n            .catch(error => { console.error(error); throw error; }),\r\n};\r\n\r\nexport const searchService = {\r\n    getAll: (query: string, page: number = 1): Promise<AxiosResponse<MovieApiResponse>> =>\r\n        apiService.get(`/3/search/movie?query=${encodeURIComponent(query)}&page=${page}`)\r\n            .then(response => response)\r\n            .catch(error => { console.error(error); throw error; }),\r\n};\r\n\r\n\r\nexport const userService = {\r\n    getUserInfo: (): Promise<AxiosResponse<UserApiResponse>> =>\r\n        userApiService.get('/3/account')\r\n            .then(response => response)\r\n            .catch(error => { console.error(error); throw error; }),\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}