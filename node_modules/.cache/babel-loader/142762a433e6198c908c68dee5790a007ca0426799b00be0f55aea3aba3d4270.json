{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\IdeaProjects\\\\tscontrol\\\\src\\\\components\\\\GenresComponent\\\\GenresComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { genresService } from \"../../services/axiosService\";\nimport { GenreListComponent } from \"../GenreListComponent/GenreListComponent\";\nimport { usePageQuery } from \"../../services/pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MovieGenre = ({\n  genreId\n}) => {\n  _s();\n  const {\n    page,\n    prevPage,\n    nextPage\n  } = usePageQuery();\n  const [movies, setMovies] = useState([]);\n  const [genreDictionary, setGenreDictionary] = useState({});\n  useEffect(() => {\n    genresService.getAll().then(({\n      data\n    }) => {\n      const dictionary = {};\n      data.genres.forEach(genre => {\n        dictionary[genre.id] = genre.name;\n      });\n      setGenreDictionary(dictionary);\n      console.log(dictionary, 'from movie genre');\n    }).catch(error => {\n      console.error('Error', error);\n    });\n  }, []);\n  useEffect(() => {\n    const pageNumber = page ? parseInt(page, 10) : 1;\n    if (genreId) {\n      genresService.getMoviesByGenre(genreId, pageNumber).then(({\n        data\n      }) => {\n        setMovies(data.results);\n        console.log('Movies from API:', data.results);\n      }).catch(error => {\n        console.error('Error', error);\n      });\n    }\n  }, [genreId, page]);\n  const paginationControls = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: prevPage,\n      children: \"Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Page \", page]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextPage,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n  console.log('Movies to render in GenreListComponent:', movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GenreListComponent, {\n      genreId: genreId,\n      movies: movies,\n      genreDictionary: genreDictionary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), paginationControls]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(MovieGenre, \"jgKnoEk795GIjeJ3quIhShaY1Tw=\", false, function () {\n  return [usePageQuery];\n});\n_c = MovieGenre;\nvar _c;\n$RefreshReg$(_c, \"MovieGenre\");","map":{"version":3,"names":["React","useState","useEffect","genresService","GenreListComponent","usePageQuery","jsxDEV","_jsxDEV","MovieGenre","genreId","_s","page","prevPage","nextPage","movies","setMovies","genreDictionary","setGenreDictionary","getAll","then","data","dictionary","genres","forEach","genre","id","name","console","log","catch","error","pageNumber","parseInt","getMoviesByGenre","results","paginationControls","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/IdeaProjects/tscontrol/src/components/GenresComponent/GenresComponent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport {genresService} from \"../../services/axiosService\";\r\nimport {GenreListComponent} from \"../GenreListComponent/GenreListComponent\";\r\nimport {usePageQuery} from \"../../services/pagination\";\r\nimport {Movie, Genre} from \"../../services/axiosService\";\r\n\r\n\r\ninterface MovieGenreProps {\r\n    genreId: number;\r\n}\r\n\r\nexport const MovieGenre: React.FC<MovieGenreProps> = ({ genreId }) => {\r\n\r\n    const {page, prevPage, nextPage} = usePageQuery();\r\n    const [movies, setMovies] = useState<Movie[]>([]);\r\n    const [genreDictionary, setGenreDictionary] = useState<{ [key: number]: string }>({});\r\n\r\n    useEffect(() => {\r\n        genresService.getAll().then(({data}) => {\r\n            const dictionary: { [key: number]: string } = {};\r\n            data.genres.forEach((genre: Genre) => {\r\n                dictionary[genre.id] = genre.name;\r\n            });\r\n            setGenreDictionary(dictionary);\r\n            console.log(dictionary, 'from movie genre')\r\n        }).catch(error => {\r\n            console.error('Error', error);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const pageNumber = page ? parseInt(page, 10) : 1;\r\n        if (genreId) {\r\n            genresService.getMoviesByGenre(genreId, pageNumber).then(({data}) => {\r\n                setMovies(data.results);\r\n                console.log('Movies from API:', data.results);\r\n            }).catch(error => {\r\n                console.error('Error', error);\r\n            });\r\n        }\r\n    }, [genreId, page]);\r\n\r\n\r\n    const paginationControls = (\r\n        <div>\r\n            <button onClick={prevPage}>Previous</button>\r\n            <span>Page {page}</span>\r\n            <button onClick={nextPage}>Next</button>\r\n        </div>\r\n    );\r\n\r\n    console.log('Movies to render in GenreListComponent:', movies);\r\n    return (\r\n        <div>\r\n            <GenreListComponent genreId={genreId} movies={movies} genreDictionary={genreDictionary}/>\r\n            {paginationControls}\r\n        </div>\r\n    );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}