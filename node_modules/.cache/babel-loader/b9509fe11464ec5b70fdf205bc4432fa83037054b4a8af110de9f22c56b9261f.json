{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\IdeaProjects\\\\tscontrol\\\\src\\\\components\\\\hoc\\\\hoc.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { MainLayout } from \"../layouts/MainLayout\";\nimport { moviesService, searchService, genresService } from \"../../services/axiosService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function WithSearch(Component) {\n  var _s = $RefreshSig$();\n  console.log('Rendering WithSearch HOC');\n  return _s(function WrappedComponent(props) {\n    _s();\n    const navigate = useNavigate(); // Добавьте эту строку\n    const [searchTerm, setSearchTerm] = useState('');\n    const [selectedGenre, setSelectedGenre] = useState(null);\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState({});\n    useEffect(() => {\n      genresService.getAll().then(({\n        data\n      }) => {\n        const genresDict = data.genres.reduce((acc, genre) => {\n          acc[genre.id.toString()] = genre.name;\n          return acc;\n        }, {});\n        setGenres(genresDict);\n      }).catch(error => {\n        console.error('Error loading genres:', error);\n      });\n    }, []);\n    const handleGenreSelect = genreId => {\n      console.log('Selected genre:', genreId);\n      setSelectedGenre(genreId);\n    };\n    const handleSearch = async query => {\n      console.log('Search query:', query);\n      setSearchTerm(query);\n      if (query.length > 0) {\n        try {\n          const response = await searchService.getAll(query);\n          console.log('Search results:', response.data.results);\n          setMovies(response.data.results);\n        } catch (error) {\n          console.error('Search error:', error);\n        }\n      } else {\n        try {\n          const response = await moviesService.getAll();\n          console.log('Movies results:', response.data.results);\n          setMovies(response.data.results);\n        } catch (error) {\n          console.error('Movies error:', error);\n        }\n      }\n    };\n    useEffect(() => {\n      const fetchMovies = async () => {\n        let response;\n        if (searchTerm) {\n          response = await searchService.getAll(searchTerm);\n        } else if (selectedGenre !== null) {\n          response = await genresService.getMoviesByGenre(selectedGenre);\n        } else {\n          response = await moviesService.getAll();\n        }\n        if (response && response.data && response.data.results) {\n          setMovies(response.data.results);\n        }\n      };\n      fetchMovies().catch(console.error);\n    }, [searchTerm, selectedGenre]);\n    return /*#__PURE__*/_jsxDEV(Component, {\n      ...props,\n      onSearch: handleSearch,\n      onGenreSelect: handleGenreSelect,\n      searchTerm: searchTerm,\n      movies: movies,\n      genres: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this);\n  }, \"UYgA0MQ6OLxvKchKzfGSWRSD9X0=\", false, function () {\n    return [useNavigate];\n  });\n}\n_c = WithSearch;\nexport const MainLayoutWithSearch = WithSearch(MainLayout);\n_c2 = MainLayoutWithSearch;\nvar _c, _c2;\n$RefreshReg$(_c, \"WithSearch\");\n$RefreshReg$(_c2, \"MainLayoutWithSearch\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","MainLayout","moviesService","searchService","genresService","jsxDEV","_jsxDEV","WithSearch","Component","_s","$RefreshSig$","console","log","WrappedComponent","props","navigate","searchTerm","setSearchTerm","selectedGenre","setSelectedGenre","movies","setMovies","genres","setGenres","getAll","then","data","genresDict","reduce","acc","genre","id","toString","name","catch","error","handleGenreSelect","genreId","handleSearch","query","length","response","results","fetchMovies","getMoviesByGenre","onSearch","onGenreSelect","fileName","_jsxFileName","lineNumber","columnNumber","_c","MainLayoutWithSearch","_c2","$RefreshReg$"],"sources":["C:/Users/Dell/IdeaProjects/tscontrol/src/components/hoc/hoc.tsx"],"sourcesContent":["import React, { useState, useEffect, ComponentType } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport {MainLayout} from \"../layouts/MainLayout\";\r\nimport {moviesService, searchService, genresService} from \"../../services/axiosService\";\r\n\r\ninterface WithSearchProps {\r\n    onSearch: (query: string) => void;\r\n    onGenreSelect: (genreId: number) => void;\r\n    searchTerm: string;\r\n    movies: any[];\r\n    genres: { [key: string]: string };\r\n}\r\n\r\n\r\nexport function WithSearch<T extends WithSearchProps>(Component: ComponentType<T>) {\r\n    console.log('Rendering WithSearch HOC');\r\n    return function WrappedComponent(props: Omit<T, keyof WithSearchProps>) {\r\n        const navigate = useNavigate(); // Добавьте эту строку\r\n        const [searchTerm, setSearchTerm] = useState<string>('');\r\n        const [selectedGenre, setSelectedGenre] = useState<number | null>(null);\r\n        const [movies, setMovies] = useState<any[]>([]);\r\n        const [genres, setGenres] = useState<{ [key: string]: string }>({});\r\n\r\n        useEffect(() => {\r\n            genresService.getAll().then(({ data }) => {\r\n                const genresDict = data.genres.reduce((acc: { [key: string]: string }, genre) => {\r\n                    acc[genre.id.toString()] = genre.name;\r\n                    return acc;\r\n                }, {});\r\n                setGenres(genresDict);\r\n            }).catch(error => {\r\n                console.error('Error loading genres:', error);\r\n            });\r\n        }, []);\r\n\r\n        const handleGenreSelect = (genreId: number) => {\r\n            console.log('Selected genre:', genreId);\r\n            setSelectedGenre(genreId);\r\n        };\r\n\r\n        const handleSearch = async (query: string) => {\r\n            console.log('Search query:', query);\r\n            setSearchTerm(query);\r\n            if (query.length > 0) {\r\n                try {\r\n                    const response = await searchService.getAll(query);\r\n                    console.log('Search results:', response.data.results);\r\n                    setMovies(response.data.results);\r\n                } catch (error) {\r\n                    console.error('Search error:', error);\r\n                }\r\n            } else {\r\n                try {\r\n                    const response = await moviesService.getAll();\r\n                    console.log('Movies results:', response.data.results);\r\n                    setMovies(response.data.results);\r\n                } catch (error) {\r\n                    console.error('Movies error:', error);\r\n                }\r\n            }\r\n        };\r\n\r\n        useEffect(() => {\r\n            const fetchMovies = async () => {\r\n                let response;\r\n                if (searchTerm) {\r\n                    response = await searchService.getAll(searchTerm);\r\n                } else if (selectedGenre !== null) {\r\n                    response = await genresService.getMoviesByGenre(selectedGenre);\r\n                } else {\r\n                    response = await moviesService.getAll();\r\n                }\r\n\r\n                if (response && response.data && response.data.results) {\r\n                    setMovies(response.data.results);\r\n                }\r\n            };\r\n\r\n            fetchMovies().catch(console.error);\r\n        }, [searchTerm, selectedGenre]);\r\n\r\n\r\n        return (\r\n                <Component\r\n                    {...props as T}\r\n                    onSearch={handleSearch}\r\n                    onGenreSelect={handleGenreSelect}\r\n                    searchTerm={searchTerm}\r\n                    movies={movies}\r\n                    genres={genres}\r\n                />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport const MainLayoutWithSearch = WithSearch(MainLayout);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}